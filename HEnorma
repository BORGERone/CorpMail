Это клиент-серверное приложение. Клиент написан на WPF + C#, сервер написан на C#. Далее представлен код клиентского приложения на WPF:

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Globalization;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Input;
using System.Windows.Media;
using Newtonsoft.Json;

namespace MessengerClient
{
    public class WidthConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            double totalWidth = (double)value;
            return totalWidth * 0.6; // 60% от ширины MessagesListBox
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
    }

    public partial class MainWindow : Window
    {
        private TcpClient client;
        private NetworkStream stream;
        private Thread receiveThread;
        private string clientName = "ClientName1"; // Замените на ваше имя клиента
        private ObservableCollection<Message> messages = new ObservableCollection<Message>();
        private int currentPage = 0; // Текущая страница истории сообщений
        private int pageSize = 10; // Количество сообщений на страницу
        private bool isLastPageLoaded = false; // Флаг для отслеживания, загружена ли последняя страница

        public MainWindow()
        {
            InitializeComponent();
            MessagesListBox.ItemsSource = messages;
            ConnectToServer();
        }

        private void ConnectToServer()
        {
            client = new TcpClient("127.0.0.1", 1234);
            stream = client.GetStream();
            receiveThread = new Thread(ReceiveMessages);
            receiveThread.Start();
        }

        private void ReceiveMessages()
        {
            byte[] buffer = new byte[1073741824];
            int bytesRead;

            while (true)
            {
                bytesRead = 0;

                try
                {
                    bytesRead = stream.Read(buffer, 0, buffer.Length);
                }
                catch
                {
                    // Обработка ошибок чтения
                    break;
                }

                if (bytesRead > 0)
                {
                    string json = Encoding.UTF8.GetString(buffer, 0, bytesRead);
                    ProcessJson(json);
                }
            }
        }

        private void ProcessJson(string json)
        {
            var receivedMessages = JsonConvert.DeserializeObject<List<Message>>(json);
            if (receivedMessages != null)
            {
                Dispatcher.Invoke(() =>
                {
                    messages.Clear();
                    foreach (var message in receivedMessages)
                    {
                        messages.Add(new Message
                        {
                            Text = message.Text,
                            Alignment = message.Name == clientName ? HorizontalAlignment.Right : HorizontalAlignment.Left,
                            BackgroundColor = message.Name == clientName ? "#0078D7" : "#333333"
                        });
                    }
                    ScrollToBottom();
                });
            }
        }

        private void ScrollToBottom()
        {
            if (MessagesListBox.Items.Count > 0 && VisualTreeHelper.GetChildrenCount(MessagesListBox) > 0)
            {
                var border = (Border)VisualTreeHelper.GetChild(MessagesListBox, 0);
                var scrollViewer = (ScrollViewer)VisualTreeHelper.GetChild(border, 0);
                if (scrollViewer.VerticalOffset >= scrollViewer.ScrollableHeight)
                {
                    scrollViewer.ScrollToEnd();
                }
            }
        }

        private void SendButton_Click(object sender, RoutedEventArgs e)
        {
            if (!string.IsNullOrEmpty(MessageTextBox.Text))
            {
                var message = new Message
                {
                    Text = MessageTextBox.Text,
                    Name = clientName,
                    Alignment = HorizontalAlignment.Right,
                    BackgroundColor = "#0078D7"
                };

                string json = JsonConvert.SerializeObject(message);
                byte[] data = Encoding.UTF8.GetBytes(json);
                stream.Write(data, 0, data.Length);
                MessageTextBox.Clear();
                ResetTextBoxSize();
                MessageTextBox.Height = Double.NaN; // Сброс фиксированной высоты
                UpdateLayout();
            }
        }

        private void Window_Closed(object sender, EventArgs e)
        {
            receiveThread?.Abort();
            stream?.Close();
            client?.Close();
        }

        public class SubtractMarginConverter : IValueConverter
        {
            public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
            {
                // Вычитаем отступы и границы из ширины ListBox
                double totalWidth = (double)value;
                return totalWidth - 20; // Предполагаем, что отступы и границы составляют 20 единиц
            }

            public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
            {
                throw new NotImplementedException();
            }
        }

        private void MessageTextBox_PreviewKeyDown(object sender, KeyEventArgs e)
        {
            var textBox = sender as TextBox;

            // При нажатии Enter без Shift отправляем сообщение
            if (e.Key == Key.Enter && Keyboard.Modifiers != ModifierKeys.Shift)
            {
                SendButton_Click(this, new RoutedEventArgs());
                e.Handled = true; // Предотвращаем дальнейшую обработку события
            }
            // При нажатии Shift+Enter добавляем новую строку
            else if (e.Key == Key.Enter && Keyboard.Modifiers == ModifierKeys.Shift)
            {
                int caretIndex = textBox.CaretIndex;
                textBox.Text = textBox.Text.Insert(caretIndex, Environment.NewLine);
                textBox.CaretIndex = caretIndex + Environment.NewLine.Length;
                e.Handled = true; // Предотвращаем дальнейшую обработку события
            }

            // Автоматическое увеличение высоты TextBox
            textBox.Height = Double.NaN; // Сброс фиксированной высоты
            textBox.Measure(new Size(textBox.Width, Double.PositiveInfinity));
            double textHeight = textBox.DesiredSize.Height;
            textBox.Height = textHeight > 17 ? textHeight : 17; // Минимальная высота TextBox
        }

        private void ResetTextBoxSize()
        {
            MessageTextBox.Height = Double.NaN; // Сброс фиксированной высоты
            MessageTextBox.Measure(new Size(MessageTextBox.Width, Double.PositiveInfinity));
            double textHeight = MessageTextBox.DesiredSize.Height;
            MessageTextBox.Height = textHeight > 17 ? textHeight : 17; // Минимальная высота TextBox
        }


        private void RequestNextPageOfMessages()
        {
            if (!isLastPageLoaded)
            {
                var request = new { PageRequest = currentPage + 1 };
                string jsonRequest = JsonConvert.SerializeObject(request);
                byte[] data = Encoding.UTF8.GetBytes(jsonRequest);
                stream.Write(data, 0, data.Length);
            }
        }

        private void MessagesListBox_ScrollChanged(object sender, ScrollChangedEventArgs e)
        {
            // Проверяем, достигли ли мы верха списка
            if (e.VerticalOffset == 0 && !isLastPageLoaded)
            {
                RequestPreviousPageOfMessages();
            }
        }

        private void RequestPreviousPageOfMessages()
        {
            if (currentPage > 0)
            {
                var request = new { PageRequest = currentPage - 1 };
                string jsonRequest = JsonConvert.SerializeObject(request);
                byte[] data = Encoding.UTF8.GetBytes(jsonRequest);
                stream.Write(data, 0, data.Length);
            }
        }

        private void ProcessReceivedMessages(string json)
        {
            var receivedMessages = JsonConvert.DeserializeObject<List<Message>>(json);
            if (receivedMessages != null && receivedMessages.Count > 0)
            {
                Dispatcher.Invoke(() =>
                {
                    foreach (var message in receivedMessages)
                    {
                        messages.Insert(0, message); // Вставляем сообщения в начало списка
                    }
                });

                currentPage--; // Уменьшаем номер текущей страницы
            }
            else
            {
                isLastPageLoaded = true; // Если сообщений нет, значит достигнут начало истории
            }
        }

    }
}


public class Message
{
    public string Text { get; set; }
    public string Name { get; set; } // Имя отправителя сообщения
    public HorizontalAlignment Alignment { get; set; }
    public string BackgroundColor { get; set; }
}





Далее представлен код клиентского XAML файла:

<Window x:Class="MessengerClient.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:local="clr-namespace:MessengerClient"
        Title="Messenger Client" Height="350" Width="525">
    <Window.Resources>
        <local:WidthConverter x:Key="WidthConverter"/>
        <Style TargetType="ScrollBar">
            <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false"/>
            <Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
            <Setter Property="Stylus.IsTapFeedbackEnabled" Value="false"/>
            <Setter Property="Stylus.IsTouchFeedbackEnabled" Value="false"/>
        </Style>
        <Style TargetType="ScrollViewer">
            <Setter Property="PanningMode" Value="Both"/>
            <Setter Property="CanContentScroll" Value="false"/>
        </Style>
    </Window.Resources>
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>
        <ListBox x:Name="MessagesListBox" Grid.Row="0" HorizontalContentAlignment="Stretch" VerticalContentAlignment="Bottom"
                 ScrollViewer.ScrollChanged="MessagesListBox_ScrollChanged"
                 VirtualizingStackPanel.IsVirtualizing="True"
                 VirtualizingStackPanel.VirtualizationMode="Recycling"
                 ScrollViewer.IsDeferredScrollingEnabled="True">
            <ListBox.Resources>
                <Style TargetType="ScrollViewer">
                    <Setter Property="PanningMode" Value="Both"/>
                    <Setter Property="CanContentScroll" Value="false"/>
                </Style>
            </ListBox.Resources>
            <ListBox.ItemTemplate>
                <DataTemplate>
                    <StackPanel Orientation="Horizontal" HorizontalAlignment="{Binding Alignment}">
                        <Border Background="{Binding BackgroundColor}" Padding="10" CornerRadius="5"
                                MaxWidth="{Binding ElementName=MessagesListBox, Path=ActualWidth, Converter={StaticResource WidthConverter}}">
                            <TextBlock Text="{Binding Text}" Foreground="White" TextWrapping="Wrap"/>
                        </Border>
                    </StackPanel>
                </DataTemplate>
            </ListBox.ItemTemplate>
        </ListBox>
        <StackPanel Grid.Row="1" Orientation="Horizontal" VerticalAlignment="Bottom">
            <TextBox x:Name="MessageTextBox" HorizontalAlignment="Stretch" Margin="10" VerticalAlignment="Bottom"
                     TextWrapping="Wrap" AcceptsReturn="True" VerticalScrollBarVisibility="Auto" PreviewKeyDown="MessageTextBox_PreviewKeyDown" MaxHeight="100"
                     Width="{Binding ElementName=MessagesListBox, Path=ActualWidth, Converter={StaticResource WidthConverter}}" FontSize="17"/>
            <Button Content="Send" Margin="10" Width="75" Click="SendButton_Click"/>
        </StackPanel>
    </Grid>
</Window>



Далее представлен код серверного приложения

using System;
using System.Collections.Generic;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using Newtonsoft.Json;
using System.Threading;

public class Server
{
    private TcpListener tcpListener;
    private List<TcpClient> clients = new List<TcpClient>();
    private List<Message> messageHistory = new List<Message>(); // Изменено на список объектов Message
    private const string HistoryFilePath = "messageHistory.json";
    private const long MaxFileSize = 25L * 1024L; // 25 килобайт в байтах

    private int currentPage = 0;
    private const int pageSize = 10; // Количество сообщений на страницу

    public Server(int port)
    {
        tcpListener = new TcpListener(IPAddress.Any, port);
        tcpListener.Start();
        StartAccept();
    }


    private void StartAccept()
    {
        tcpListener.BeginAcceptTcpClient(HandleAsyncConnection, tcpListener);
    }

    private void HandleAsyncConnection(IAsyncResult result)
    {
        StartAccept(); // Слушаем следующее входящее соединение
        TcpClient client = tcpListener.EndAcceptTcpClient(result);
        clients.Add(client);
        Thread clientThread = new Thread(new ParameterizedThreadStart(HandleClient));
        clientThread.Start(client);
    }

    private void HandleClient(object obj)
    {
        TcpClient client = (TcpClient)obj;
        NetworkStream stream = client.GetStream();
        byte[] buffer = new byte[10000024];
        int bytesRead;


        while (true)
        {
            bytesRead = 0;

            try
            {
                bytesRead = stream.Read(buffer, 0, buffer.Length);
                if (bytesRead == 0)
                {
                    // Клиент отключился
                    break;
                }

                string receivedData = Encoding.UTF8.GetString(buffer, 0, bytesRead);
                dynamic request = JsonConvert.DeserializeObject(receivedData);

                if (request != null && request.PageRequest != null)
                {
                    int requestedPage = request.PageRequest;
                    SendHistoryPageToClient(client, requestedPage);
                }
            }
            catch
            {
                // Обработка ошибок чтения
                break;
            }

            // Пересылка файла истории сообщений всем клиентам
            string dataReceived = Encoding.UTF8.GetString(buffer, 0, bytesRead);
            Message receivedMessage = JsonConvert.DeserializeObject<Message>(dataReceived); // Десериализация в объект Message
            if (receivedMessage != null)
            {
                messageHistory.Add(receivedMessage); // Добавление сообщения в историю
                SaveHistoryToFile(); // Сохранение истории сообщений в файл
                BroadcastMessageHistory(client);
                SendUpdatedHistoryToClient(client);


            }
        }


        clients.Remove(client);
        client.Close();

    }

    private void SendUpdatedHistoryToClient(TcpClient client)
    {
        string json = File.ReadAllText("messageHistory.json");
        byte[] buffer = Encoding.UTF8.GetBytes(json);
        NetworkStream stream = client.GetStream();
        stream.Write(buffer, 0, buffer.Length);
    }

    private void BroadcastMessageHistory(TcpClient originClient)
    {
        string json = File.ReadAllText("messageHistory.json");
        byte[] buffer = Encoding.UTF8.GetBytes(json);

        foreach (var client in clients)
        {
            if (client != originClient) // Не отправляем файл обратно клиенту, который его послал
            {
                NetworkStream stream = client.GetStream();
                stream.Write(buffer, 0, buffer.Length);
            }
        }
    }

    private void SaveHistoryToFile()
    {
        string json = JsonConvert.SerializeObject(messageHistory, Formatting.Indented);
        File.WriteAllText("messageHistory.json", json);
    }

    static void Main(string[] args)
    {
        Server server = new Server(1234); // Запуск сервера на порту 1234
        Console.WriteLine("Сервер запущен и ожидает подключений...");
        Console.ReadLine(); // Ожидание ввода для завершения программы
    }

    private void CheckFileSizeAndArchiveIfNeeded()
    {
        FileInfo fileInfo = new FileInfo(HistoryFilePath);
        if (fileInfo.Exists && fileInfo.Length > MaxFileSize)
        {
            string archiveFilePath = GetArchiveFilePath();
            // Убедимся, что все операции с файлом завершены перед копированием
            fileInfo.CopyTo(archiveFilePath, overwrite: true);
            // Очистка файла с использованием FileStream
            using (FileStream fileStream = File.Open(HistoryFilePath, FileMode.Open))
            {
                fileStream.SetLength(0);
            }
            // Запись пустого JSON массива в файл
            File.WriteAllText(HistoryFilePath, "[]");
        }
    }



    private string GetArchiveFilePath()
    {
        string directory = Path.GetDirectoryName(HistoryFilePath);
        string fileNameWithoutExtension = Path.GetFileNameWithoutExtension(HistoryFilePath);
        string extension = Path.GetExtension(HistoryFilePath);

        int archiveNumber = 1;
        string archiveFilePath;
        do
        {
            archiveFilePath = Path.Combine(directory, $"{fileNameWithoutExtension}_{archiveNumber}{extension}");
            archiveNumber++;
        } while (File.Exists(archiveFilePath));

        return archiveFilePath;
    }

    private void SendHistoryPageToClient(TcpClient client, int page)
    {
        int skip = page * pageSize;
        List<Message> pageOfMessages = messageHistory
            .Skip(skip)
            .Take(pageSize)
            .ToList();

        if (pageOfMessages.Count == 0)
        {
            // Если нет сообщений для отправки, отправляем пустой JSON массив
            pageOfMessages = new List<Message>();
        }

        string json = JsonConvert.SerializeObject(pageOfMessages, Formatting.Indented);
        byte[] buffer = Encoding.UTF8.GetBytes(json);
        NetworkStream stream = client.GetStream();
        stream.Write(buffer, 0, buffer.Length);
    }


}

public class Message
{
    public string Name { get; set; }
    public string Text { get; set; }
}

